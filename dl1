import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import normalize
from sklearn.model_selection import train_test_split

from tensorflow.keras.layers import Activation, Dense, Dropout
from tensorflow.keras.models import Sequential
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.optimizers import Adam
from keras.layers import BatchNormalization

from keras.datasets import boston_housing
(train_data, train_targets), (test_data, test_targets) = boston_housing.load_data()

print(f'Training data : {train_data.shape}')
print(f'Test data : {test_data.shape}')
print(f'Training sample : {train_data[0]}')
print(f'Training target sample : {train_targets[0]}')


mean = train_data.mean(axis=0)
train_data -= mean
std = train_data.std(axis=0)
train_data /= std

test_data -= mean
test_data /= std

from sklearn.linear_model import LinearRegression

regressor = LinearRegression()

regressor.fit(train_data,train_targets)

y_pred = regressor.predict(test_data)

from sklearn.metrics import mean_squared_error
rmse = (np.sqrt(mean_squared_error(test_targets, y_pred)))
print(rmse)

from sklearn.metrics import r2_score
r2 = r2_score(test_targets, y_pred)
print(r2)

import keras
from keras.layers import Dense, Activation,Dropout
from keras.models import Sequential

model = Sequential()
model.add(Dense(128,activation = 'relu',input_dim =13))
model.add(Dense(64,activation = 'relu'))

model.add(Dense(32,activation = 'relu'))
model.add(Dense(16,activation = 'relu'))
model.add(Dense(1))

model.compile(optimizer = 'adam',loss ='mean_squared_error',metrics=['mae'])

y_pred = model.predict(test_data)
mse_nn, mae_nn = model.evaluate(test_data,test_targets)
print('Mean squared error on test data: ', mse_nn)
print('Mean absolute error on test data: ', mae_nn)

from sklearn.metrics import mean_absolute_error
lr_model = LinearRegression()
lr_model.fit(train_data, train_targets)

y_pred_lr = lr_model.predict(test_data)
mse_lr = mean_squared_error(test_targets, y_pred_lr)
mae_lr = mean_absolute_error(test_targets, y_pred_lr)
print('Mean squared error on test data: ', mse_lr)
print('Mean absolute error on test data: ', mae_lr)
from sklearn.metrics import r2_score
r2 = r2_score(test_targets, y_pred)
print(r2)
